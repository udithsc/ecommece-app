version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:15-alpine
    container_name: udt-store-db-prod
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-udt-store-db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - udt-store-prod-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-udt-store-db}']
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Next.js Production Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: udt-store-web-prod
    restart: always
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-udt-store-db}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - udt-store-prod-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis for Production
  redis:
    image: redis:7-alpine
    container_name: udt-store-redis-prod
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - udt-store-prod-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: udt-store-nginx-prod
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - udt-store-prod-network
    profiles:
      - nginx
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  udt-store-prod-network:
    driver: bridge

# =============================================================================
# Docker Compose for LOCAL DEVELOPMENT ONLY
# =============================================================================
# This file is for local development with PostgreSQL in Docker
# Production uses Vercel Postgres (managed service)
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d          # Start database only
#   docker-compose -f docker-compose.dev.yml up postgres -d # Start PostgreSQL only
#   docker-compose -f docker-compose.dev.yml down           # Stop all services

services:
  # PostgreSQL Database for Local Development
  postgres:
    image: postgres:15-alpine
    container_name: udt-store-dev-db
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-udt-store-db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}  
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - udt-store-dev-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-udt-store-db}']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false"
      - "com.docker.compose.service=postgres"

  # Adminer for Database Management (Development Only)
  adminer:
    image: adminer:4.8.1-standalone
    container_name: udt-store-dev-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - udt-store-dev-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    labels:
      - "traefik.enable=false"
      - "com.docker.compose.service=adminer"

volumes:
  postgres_dev_data:
    driver: local
    labels:
      - "com.docker.compose.project=udt-store-dev"

networks:
  udt-store-dev-network:
    driver: bridge
    labels:
      - "com.docker.compose.project=udt-store-dev"

# =============================================================================
# DEVELOPMENT WORKFLOW
# =============================================================================
# 1. Start database: docker-compose -f docker-compose.dev.yml up postgres -d
# 2. Run migrations: npm run db:push
# 3. Seed data: npm run db:seed  
# 4. Start Next.js: npm run dev
# 5. Access:
#    - App: http://localhost:3000
#    - Database Admin: http://localhost:8080
#    - Database: localhost:5432
#
# Connection Details for Adminer:
#   Server: postgres
#   Username: postgres
#   Password: postgres123
#   Database: udt-store-db
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and customer data
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  role          Role      @default(USER)
  password      String?   // For email/password auth
  
  // Profile information
  phone         String?
  dateOfBirth   DateTime? @map("date_of_birth")
  gender        Gender?
  
  // Timestamps
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      WishlistItem[]
  cartItems     CartItem[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Address model for shipping and billing
model Address {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  type        AddressType @default(SHIPPING)
  firstName   String      @map("first_name")
  lastName    String      @map("last_name")
  company     String?
  address1    String      @map("address_1")
  address2    String?     @map("address_2")
  city        String
  state       String
  postalCode  String      @map("postal_code")
  country     String      @default("US")
  phone       String?
  isDefault   Boolean     @default(false) @map("is_default")
  
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  @@map("addresses")
}

// Category model for product organization
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?   @map("parent_id")
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Self-referencing relation for subcategories
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@map("categories")
}

// Product model
model Product {
  id            String        @id @default(cuid())
  name          String
  slug          String        @unique
  description   String?       @db.Text
  shortDescription String?    @map("short_description")
  sku           String?       @unique
  
  // Pricing
  price         Decimal       @db.Decimal(10,2)
  comparePrice  Decimal?      @map("compare_price") @db.Decimal(10,2)
  costPrice     Decimal?      @map("cost_price") @db.Decimal(10,2)
  
  // Inventory
  trackInventory Boolean      @default(true) @map("track_inventory")
  inventory     Int          @default(0)
  lowStockThreshold Int      @default(5) @map("low_stock_threshold")
  
  // Physical properties
  weight        Decimal?      @db.Decimal(8,2)
  dimensions    String?       // JSON string for length, width, height
  
  // SEO and metadata
  metaTitle     String?       @map("meta_title")
  metaDescription String?     @map("meta_description")
  
  // Status
  status        ProductStatus @default(DRAFT)
  featured      Boolean       @default(false)
  
  // Media
  images        ProductImage[]
  
  // Timestamps
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  publishedAt   DateTime?     @map("published_at")
  
  // Relations
  categoryId    String        @map("category_id")
  category      Category      @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String  @map("product_id")
  url       String
  altText   String? @map("alt_text")
  sortOrder Int     @default(0) @map("sort_order")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

// Order management
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @map("order_number")
  userId          String?     @map("user_id")
  
  // Order status
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED) @map("fulfillment_status")
  
  // Pricing
  subtotal        Decimal     @db.Decimal(10,2)
  tax             Decimal     @db.Decimal(10,2)
  shipping        Decimal     @db.Decimal(10,2)
  discount        Decimal     @default(0) @db.Decimal(10,2)
  total           Decimal     @db.Decimal(10,2)
  
  // Currency
  currency        String      @default("USD")
  
  // Customer information
  email           String
  phone           String?
  
  // Addresses
  shippingAddressId String?   @map("shipping_address_id")
  billingAddressId  String?   @map("billing_address_id")
  
  // Payment information
  stripePaymentIntentId String? @map("stripe_payment_intent_id")
  stripeChargeId        String? @map("stripe_charge_id")
  
  // Shipping
  shippingMethod  String?     @map("shipping_method")
  trackingNumber  String?     @map("tracking_number")
  shippedAt       DateTime?   @map("shipped_at")
  deliveredAt     DateTime?   @map("delivered_at")
  
  // Notes
  notes           String?     @db.Text
  
  // Timestamps
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Decimal @db.Decimal(10,2)
  total     Decimal @db.Decimal(10,2)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Shopping cart (persistent)
model CartItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Product reviews
model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  isVerified Boolean @default(false) @map("is_verified") // Verified purchase
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum Role {
  USER
  MANAGER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  SHIPPED
  DELIVERED
}